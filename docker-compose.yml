services:
  user_app:
    build: ./src/users
    container_name: user_app
    ports:
      - "5000:5000"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - user_net
      - app_net
    
  seller_app:
    build: ./src/sellers
    container_name: seller_app
    ports:
      - "5001:5001"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      PATH_API_USER: ${PATH_API_USER}
      PASSWORD_DEFAULT: ${PASSWORD_DEFAULT}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - seller_net
      - app_net

  customer_app:
    build: ./src/customers
    container_name: customer_app
    ports:
      - "5002:5002"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      PATH_API_USER: ${PATH_API_USER}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - customer_net
      - app_net   

  product_app:
    build: ./src/products
    container_name: product_app
    ports:
      - "5003:5003"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - product_app
      - app_net

  order_app:
    build: ./src/orders
    container_name: order_app
    ports:
      - "5004:5004"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      PATH_API_USER: ${PATH_API_USER}
      PATH_API_CUSTOMER: ${PATH_API_CUSTOMER}
      PATH_API_SELLER: ${PATH_API_SELLER}
      PATH_API_PRODUCT: ${PATH_API_PRODUCT}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - order_net
      - app_net  

  database:
    image: postgres:16-alpine
    container_name: database
    restart: always
    ports:
      - "5433:5432"     
    env_file: 
      - .env
    environment:
      POSTGRES_DB: ${DB_POSTGRES_DB}
      POSTGRES_USER: ${DB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DB_POSTGRES_PASSWORD}
      TZ: America/Bogota
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d cpp" ]
      interval: 2s
      timeout: 5s
      retries: 5
    networks:
      - app_net
      - user_net
      - seller_net
      - customer_net
      - product_app
      - order_net
 
networks:
  app_net:
    driver: bridge
    name: app_net
  user_net:
    driver: bridge
    name: user_net
  seller_net:
    driver: bridge
    name: seller_net
  customer_net:
    driver: bridge
    name: customer_net
  product_app:
    driver: bridge
    name: product_app
  order_net:
    driver: bridge
    name: order_net  
volumes:
  postgres_data: