services:
  user_app:
    build: ./src/users
    container_name: user_app
    ports:
      - "5000:5000"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - user_net
      - app_net
    
  seller_app:
    build: ./src/sellers
    container_name: seller_app
    ports:
      - "5001:5001"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      PATH_API_USER: ${PATH_API_USER}
      PASSWORD_DEFAULT: ${PASSWORD_DEFAULT}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - seller_net
      - app_net

  customer_app:
    build: ./src/customers
    container_name: customer_app
    ports:
      - "5002:5002"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      PATH_API_USER: ${PATH_API_USER}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - customer_net
      - app_net   

  product_app:
    build: ./src/products
    container_name: product_app
    ports:
      - "5003:5003"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - product_app
      - app_net
    
  order_app:
    build: ./src/orders
    container_name: order_app
    ports:
      - "5004:5004"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      PATH_API_USER: ${PATH_API_USER}
      PATH_API_CUSTOMER: ${PATH_API_CUSTOMER}
      PATH_API_SELLER: ${PATH_API_SELLER}
      PATH_API_PRODUCT: ${PATH_API_PRODUCT}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - order_net
      - app_net  

  producers_app:
    build: ./src/producers
    container_name: producers_app
    ports:
      - "5005:5005"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - producers_app
      - app_net   
    
  visits_app:
    build: ./src/visits
    container_name: visits_app
    ports:
      - "5007:5007"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      PATH_API_USER: ${PATH_API_USER}
      PATH_API_CUSTOMER: ${PATH_API_CUSTOMER}
      PATH_API_SELLER: ${PATH_API_SELLER}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - visits_app
      - app_net

  recommendations_app:
    build: ./src/recommendations
    container_name: recommendations_app
    ports:
      - "5006:5006"
    env_file: 
      - .env
    environment:
      POSTGRES_DB_URI: ${DB_POSTGRES_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      GOOGLE_APPLICATION_CREDENTIALS: /src/recommendations/proyecto-final.json
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app_net
    volumes:
      - ./src/recommendations/proyecto-final.json:/src/recommendations/proyecto-final.json

  database:
    image: postgres:16-alpine
    container_name: database
    restart: always
    ports:
      - "5433:5432"     
    env_file: 
      - .env
    environment:
      POSTGRES_DB: ${DB_POSTGRES_DB}
      POSTGRES_USER: ${DB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DB_POSTGRES_PASSWORD}
      TZ: America/Bogota
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d cpp" ]
      interval: 2s
      timeout: 5s
      retries: 5
    networks:
      - app_net
      - user_net
      - seller_net
      - customer_net
      - product_app
      - order_net
      - producers_app
      - visits_app

networks:
  app_net:
    driver: bridge
    name: app_net
  user_net:
    driver: bridge
    name: user_net
  seller_net:
    driver: bridge
    name: seller_net
  customer_net:
    driver: bridge
    name: customer_net
  product_app:
    driver: bridge
    name: product_app
  order_net:
    driver: bridge
    name: order_net  
  producers_app:
    driver: bridge
    name: producers_app
  visits_app:
    driver: bridge
    name: visits_app
volumes:
  postgres_data: