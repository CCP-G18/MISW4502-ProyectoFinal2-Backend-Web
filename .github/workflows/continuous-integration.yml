name: Integracion Continua Backend

on:
  pull_request:
    branches: [ "main" ]

jobs:
  discover-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validar nombre de rama
        run: |
          echo "Rama origen: ${{ github.head_ref }}"
          if [[ "${{ github.head_ref }}" != feature/* && "${{ github.head_ref }}" != hotfix/* && "${{ github.head_ref }}" != bugfix/* ]]; then
            echo "❌ Solo se permiten pull requests desde ramas que comiencen con 'feature/', 'hotfix/' o 'bugfix/'."
            exit 1
          fi

      - name: Descubrir microservicios en src/
        id: set-matrix
        run: |
          services=$(find src -mindepth 1 -maxdepth 1 -type d -exec test -f "{}/Dockerfile" \; -print | xargs -n 1 basename)
          services_json=$(echo "${services}" | jq -R -s -c 'split("\n")[:-1]')
          echo "services=${services_json}" >> $GITHUB_OUTPUT
        
  validate-version:
    needs: discover-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover-services.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detectar cambios en el microservicio
        id: check_changes
        run: |
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main HEAD)
          echo "Archivos modificados:"
          echo "$CHANGED_FILES"
          
          if echo "$CHANGED_FILES" | grep -q "src/${{ matrix.service }}/"; then
            echo "CHANGED=true" >> $GITHUB_ENV
          else
            echo "CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Validar incremento de version
        if: env.CHANGED == 'true'
        run: |
          git fetch origin main
          PREVIOUS_VERSION=$(git show origin/main:src/${{ matrix.service }}/version || echo "0.0.0")

          NEW_VERSION=$(cat src/${{ matrix.service }}/version)

          echo "Versión anterior: $PREVIOUS_VERSION"
          echo "Nueva versión: $NEW_VERSION"

          if [ "$PREVIOUS_VERSION" == "$NEW_VERSION" ]; then
            echo "❌ La versión del microservicio ${{ matrix.service }} no ha sido incrementada. Por favor, incrementa la versión en el archivo 'version'."
            exit 1
          fi

          echo "✅ La versión del microservicio ${{ matrix.service }} ha sido incrementada correctamente."

  test:
    needs: discover-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover-services.outputs.services) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r src/${{ matrix.service }}/requirements.txt

      - name: Ejecutar pruebas con cobertura mínima del 70%
        run: |
          pytest --cov=src/${{ matrix.service }} --cov-fail-under=70 src/${{ matrix.service }}/tests
