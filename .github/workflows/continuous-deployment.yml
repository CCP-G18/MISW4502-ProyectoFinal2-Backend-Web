name: Despliegue Continuo Backend

on:
  push:
    branches: [ "main" ]

jobs:
  discover-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Descubrir microservicios en src/
        id: set-matrix
        run: |
          services=$(find src -mindepth 1 -maxdepth 1 -type d -exec test -f "{}/Dockerfile" \; -print | xargs -n 1 basename)
          services_json=$(echo "${services}" | jq -R -s -c 'split("\n")[:-1]')
          echo "services=${services_json}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: discover-services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-services.outputs.services }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover-services.outputs.services) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Autenticarse en Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configurar Docker para Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/uniandes-misw-proyecto-final/${{ matrix.service }}:latest -f src/${{ matrix.service }}/Dockerfile src/${{ matrix.service }}

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/uniandes-misw-proyecto-final/${{ matrix.service }}:latest

      - name: Set services output
        id: set-services
        run: |
          echo "services=[\"${{ matrix.service }}\"]" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ needs.build-and-push.outputs.services != '[]' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Autenticarse en Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Instalar Google Cloud SDK y Plugin de Autenticación
        run: |
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk
          gcloud components update
          gcloud components install gke-gcloud-auth-plugin

      - name: Configurar el Plugin de Autenticación
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      - name: Obtener credenciales de Kubernetes
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --region ${{ secrets.GCP_REGION }} --project ${{ secrets.GCP_PROJECT }}

      - name: Desplegar Ingress Controller
        run: |
          kubectl apply -f k8s-configs/ingress/gateway-ingress.yaml --validate=false

      - name: Desplegar todos los microservicios en GKE
        run: |
          services=$(echo '${{ needs.build-and-push.outputs.services }}' | jq -c '.[]')
          for service in ${services}; do
            service=$(echo $service | tr -d '"')
            kubectl set image deployment/${service}-app ${service}-app=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/uniandes-misw-proyecto-final/${service}:latest --record
            kubectl rollout status deployment/${service}-app
          done
